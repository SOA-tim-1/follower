// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: follower_service.proto

package follower

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FollowerService_WriteUserRpc_FullMethodName                       = "/FollowerService/WriteUserRpc"
	FollowerService_FindByIdRpc_FullMethodName                        = "/FollowerService/FindByIdRpc"
	FollowerService_CreateFollowConnectionRpc_FullMethodName          = "/FollowerService/CreateFollowConnectionRpc"
	FollowerService_GetFollowsRpc_FullMethodName                      = "/FollowerService/GetFollowsRpc"
	FollowerService_GetFollowersRpc_FullMethodName                    = "/FollowerService/GetFollowersRpc"
	FollowerService_GetSuggestionsForUserRpc_FullMethodName           = "/FollowerService/GetSuggestionsForUserRpc"
	FollowerService_CheckIfFollowingConnectionExistRpc_FullMethodName = "/FollowerService/CheckIfFollowingConnectionExistRpc"
	FollowerService_DeleteFollowConnectionRpc_FullMethodName          = "/FollowerService/DeleteFollowConnectionRpc"
)

// FollowerServiceClient is the client API for FollowerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FollowerServiceClient interface {
	WriteUserRpc(ctx context.Context, in *WriteUserRequest, opts ...grpc.CallOption) (*Empty, error)
	FindByIdRpc(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*FindByIdResponse, error)
	CreateFollowConnectionRpc(ctx context.Context, in *CreateFollowConnectionRequest, opts ...grpc.CallOption) (*Empty, error)
	GetFollowsRpc(ctx context.Context, in *GetFollowsRequest, opts ...grpc.CallOption) (*FollowsResponse, error)
	GetFollowersRpc(ctx context.Context, in *GetFollowersRequest, opts ...grpc.CallOption) (*FollowersResponse, error)
	GetSuggestionsForUserRpc(ctx context.Context, in *GetSuggestionsRequest, opts ...grpc.CallOption) (*SuggestionsResponse, error)
	CheckIfFollowingConnectionExistRpc(ctx context.Context, in *CheckIfFollowingConnectionExistRequest, opts ...grpc.CallOption) (*CheckResponse, error)
	DeleteFollowConnectionRpc(ctx context.Context, in *DeleteFollowConnectionRequest, opts ...grpc.CallOption) (*Empty, error)
}

type followerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowerServiceClient(cc grpc.ClientConnInterface) FollowerServiceClient {
	return &followerServiceClient{cc}
}

func (c *followerServiceClient) WriteUserRpc(ctx context.Context, in *WriteUserRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, FollowerService_WriteUserRpc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followerServiceClient) FindByIdRpc(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*FindByIdResponse, error) {
	out := new(FindByIdResponse)
	err := c.cc.Invoke(ctx, FollowerService_FindByIdRpc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followerServiceClient) CreateFollowConnectionRpc(ctx context.Context, in *CreateFollowConnectionRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, FollowerService_CreateFollowConnectionRpc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followerServiceClient) GetFollowsRpc(ctx context.Context, in *GetFollowsRequest, opts ...grpc.CallOption) (*FollowsResponse, error) {
	out := new(FollowsResponse)
	err := c.cc.Invoke(ctx, FollowerService_GetFollowsRpc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followerServiceClient) GetFollowersRpc(ctx context.Context, in *GetFollowersRequest, opts ...grpc.CallOption) (*FollowersResponse, error) {
	out := new(FollowersResponse)
	err := c.cc.Invoke(ctx, FollowerService_GetFollowersRpc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followerServiceClient) GetSuggestionsForUserRpc(ctx context.Context, in *GetSuggestionsRequest, opts ...grpc.CallOption) (*SuggestionsResponse, error) {
	out := new(SuggestionsResponse)
	err := c.cc.Invoke(ctx, FollowerService_GetSuggestionsForUserRpc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followerServiceClient) CheckIfFollowingConnectionExistRpc(ctx context.Context, in *CheckIfFollowingConnectionExistRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, FollowerService_CheckIfFollowingConnectionExistRpc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followerServiceClient) DeleteFollowConnectionRpc(ctx context.Context, in *DeleteFollowConnectionRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, FollowerService_DeleteFollowConnectionRpc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowerServiceServer is the server API for FollowerService service.
// All implementations must embed UnimplementedFollowerServiceServer
// for forward compatibility
type FollowerServiceServer interface {
	WriteUserRpc(context.Context, *WriteUserRequest) (*Empty, error)
	FindByIdRpc(context.Context, *FindByIdRequest) (*FindByIdResponse, error)
	CreateFollowConnectionRpc(context.Context, *CreateFollowConnectionRequest) (*Empty, error)
	GetFollowsRpc(context.Context, *GetFollowsRequest) (*FollowsResponse, error)
	GetFollowersRpc(context.Context, *GetFollowersRequest) (*FollowersResponse, error)
	GetSuggestionsForUserRpc(context.Context, *GetSuggestionsRequest) (*SuggestionsResponse, error)
	CheckIfFollowingConnectionExistRpc(context.Context, *CheckIfFollowingConnectionExistRequest) (*CheckResponse, error)
	DeleteFollowConnectionRpc(context.Context, *DeleteFollowConnectionRequest) (*Empty, error)
	mustEmbedUnimplementedFollowerServiceServer()
}

// UnimplementedFollowerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFollowerServiceServer struct {
}

func (UnimplementedFollowerServiceServer) WriteUserRpc(context.Context, *WriteUserRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteUserRpc not implemented")
}
func (UnimplementedFollowerServiceServer) FindByIdRpc(context.Context, *FindByIdRequest) (*FindByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByIdRpc not implemented")
}
func (UnimplementedFollowerServiceServer) CreateFollowConnectionRpc(context.Context, *CreateFollowConnectionRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFollowConnectionRpc not implemented")
}
func (UnimplementedFollowerServiceServer) GetFollowsRpc(context.Context, *GetFollowsRequest) (*FollowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowsRpc not implemented")
}
func (UnimplementedFollowerServiceServer) GetFollowersRpc(context.Context, *GetFollowersRequest) (*FollowersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowersRpc not implemented")
}
func (UnimplementedFollowerServiceServer) GetSuggestionsForUserRpc(context.Context, *GetSuggestionsRequest) (*SuggestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuggestionsForUserRpc not implemented")
}
func (UnimplementedFollowerServiceServer) CheckIfFollowingConnectionExistRpc(context.Context, *CheckIfFollowingConnectionExistRequest) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIfFollowingConnectionExistRpc not implemented")
}
func (UnimplementedFollowerServiceServer) DeleteFollowConnectionRpc(context.Context, *DeleteFollowConnectionRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFollowConnectionRpc not implemented")
}
func (UnimplementedFollowerServiceServer) mustEmbedUnimplementedFollowerServiceServer() {}

// UnsafeFollowerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FollowerServiceServer will
// result in compilation errors.
type UnsafeFollowerServiceServer interface {
	mustEmbedUnimplementedFollowerServiceServer()
}

func RegisterFollowerServiceServer(s grpc.ServiceRegistrar, srv FollowerServiceServer) {
	s.RegisterService(&FollowerService_ServiceDesc, srv)
}

func _FollowerService_WriteUserRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowerServiceServer).WriteUserRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowerService_WriteUserRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowerServiceServer).WriteUserRpc(ctx, req.(*WriteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowerService_FindByIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowerServiceServer).FindByIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowerService_FindByIdRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowerServiceServer).FindByIdRpc(ctx, req.(*FindByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowerService_CreateFollowConnectionRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFollowConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowerServiceServer).CreateFollowConnectionRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowerService_CreateFollowConnectionRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowerServiceServer).CreateFollowConnectionRpc(ctx, req.(*CreateFollowConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowerService_GetFollowsRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowerServiceServer).GetFollowsRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowerService_GetFollowsRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowerServiceServer).GetFollowsRpc(ctx, req.(*GetFollowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowerService_GetFollowersRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowerServiceServer).GetFollowersRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowerService_GetFollowersRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowerServiceServer).GetFollowersRpc(ctx, req.(*GetFollowersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowerService_GetSuggestionsForUserRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSuggestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowerServiceServer).GetSuggestionsForUserRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowerService_GetSuggestionsForUserRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowerServiceServer).GetSuggestionsForUserRpc(ctx, req.(*GetSuggestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowerService_CheckIfFollowingConnectionExistRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIfFollowingConnectionExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowerServiceServer).CheckIfFollowingConnectionExistRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowerService_CheckIfFollowingConnectionExistRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowerServiceServer).CheckIfFollowingConnectionExistRpc(ctx, req.(*CheckIfFollowingConnectionExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowerService_DeleteFollowConnectionRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFollowConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowerServiceServer).DeleteFollowConnectionRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowerService_DeleteFollowConnectionRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowerServiceServer).DeleteFollowConnectionRpc(ctx, req.(*DeleteFollowConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FollowerService_ServiceDesc is the grpc.ServiceDesc for FollowerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FollowerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FollowerService",
	HandlerType: (*FollowerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteUserRpc",
			Handler:    _FollowerService_WriteUserRpc_Handler,
		},
		{
			MethodName: "FindByIdRpc",
			Handler:    _FollowerService_FindByIdRpc_Handler,
		},
		{
			MethodName: "CreateFollowConnectionRpc",
			Handler:    _FollowerService_CreateFollowConnectionRpc_Handler,
		},
		{
			MethodName: "GetFollowsRpc",
			Handler:    _FollowerService_GetFollowsRpc_Handler,
		},
		{
			MethodName: "GetFollowersRpc",
			Handler:    _FollowerService_GetFollowersRpc_Handler,
		},
		{
			MethodName: "GetSuggestionsForUserRpc",
			Handler:    _FollowerService_GetSuggestionsForUserRpc_Handler,
		},
		{
			MethodName: "CheckIfFollowingConnectionExistRpc",
			Handler:    _FollowerService_CheckIfFollowingConnectionExistRpc_Handler,
		},
		{
			MethodName: "DeleteFollowConnectionRpc",
			Handler:    _FollowerService_DeleteFollowConnectionRpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "follower_service.proto",
}
